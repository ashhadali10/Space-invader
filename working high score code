ye working code hai  highscore ka  7 se zyada score kro gey tu box aye ga us main ap name dalo gey tu apka name save ho jye ga dat file main  ye run kiya hai run ho raha hai  checkscore key method ko 2 jaga call kiya hai wo
dekh lo app



package distance;
import java.awt.Graphics;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Reader;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.stream.IntStream;

import javax.swing.JOptionPane;

import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.scene.Cursor;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.image.Image;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.TextAlignment;
import javafx.stage.Stage;
import javafx.util.Duration;

public class Game extends Application {
	
	//variables
	private int score=0;
	private String highScore="";
	private static final Random RAND = new Random();
	private static final int WIDTH = 800;
	private static final int HEIGHT = 600;
	private static final int PLAYER_SIZE = 60;
	static final Image PLAYER_IMG = new Image("file:///C:/Users/alias/Downloads/Compressed/1.png"); 
	static final Image EXPLOSION_IMG = new Image("file:///F:/Spaceinvader1/src/WhatsApp%20Image%202019-12-14%20at%2012.30.10%20PM.jpeg");
	static final int EXPLOSION_W = 128;
	static final int EXPLOSION_ROWS = 3;
	static final int EXPLOSION_COL = 3;
	static final int EXPLOSION_H = 128;
	static final int EXPLOSION_STEPS = 15;
	
	static final Image BOMBS_IMG[] = {
			new Image("file:///C:/Users/alias/Downloads/Compressed/spaceinvader/WhatsApp%20Image%202019-12-19%20at%208.32.37%20PM(1).jpeg"),
			new Image("file:///C:/Users/alias/Downloads/Compressed/spaceinvader/WhatsApp%20Image%202019-12-19%20at%208.32.37%20PM(1).jpeg"),
			new Image("file:///C:/Users/alias/Downloads/Compressed/spaceinvader/WhatsApp%20Image%202019-12-19%20at%208.32.37%20PM(1).jpeg"),
			new Image("file:///C:/Users/alias/Downloads/Compressed/spaceinvader/WhatsApp%20Image%202019-12-20%20at%203.11.16%20AM(2).jpeg"),
			new Image("file:///C:/Users/alias/Downloads/Compressed/spaceinvader/WhatsApp%20Image%202019-12-19%20at%208.32.37%20PM(1).jpeg"),
			new Image("file:///C:/Users/alias/Downloads/Compressed/spaceinvader/WhatsApp%20Image%202019-12-20%20at%203.11.16%20AM(2).jpeg"),
			new Image("file:///F:/Spaceinvader1/src/WhatsApp%20Image%202019-12-14%20at%2012.30.08%20PM%20(1).jpeg"),
			new Image("file:///F:/Spaceinvader1/src/WhatsApp%20Image%202019-12-14%20at%2012.30.08%20PM%20(1).jpeg"),
			new Image("file:///F:/Spaceinvader1/src/WhatsApp%20Image%202019-12-14%20at%2012.30.08%20PM%20(1).jpeg"),
			new Image("file:///F:/Spaceinvader1/src/WhatsApp%20Image%202019-12-14%20at%2012.30.08%20PM%20(1).jpeg"),
	};
	
	final int MAX_BOMBS = 10,  MAX_SHOTS = MAX_BOMBS * 2;
	boolean gameOver = false;
	private GraphicsContext gc;
	
	Rocket player;
	List<Shot> shots;
	List<Universe> univ;
	List<Bomb> Bombs;
	
	private double mouseX;
	private int score1;
	private int BOX_HEIGHT;
	private int GRID_HEIGHT;

	//start
	public void start(Stage stage) throws Exception {
		Canvas canvas = new Canvas(WIDTH, HEIGHT);	
		gc = canvas.getGraphicsContext2D();
		Timeline timeline = new Timeline(new KeyFrame(Duration.millis(10), e -> run(gc)));
		timeline.setCycleCount(Timeline.INDEFINITE);
		timeline.play();
		canvas.setCursor(Cursor.MOVE);
		canvas.setOnMouseMoved(e -> mouseX = e.getX());
		canvas.setOnMouseClicked(e -> {
			if(shots.size() < MAX_SHOTS) shots.add(player.shoot());
			if(gameOver) { 
				gameOver = false;
				setup();
			}
		});
		setup();
		stage.setScene(new Scene(new StackPane(canvas)));
		stage.setTitle("Space Invaders");
		stage.show();
		
	}

	//setup the game
	private void setup() {
		univ = new ArrayList<>();
	shots = new ArrayList<>();
		Bombs = new ArrayList<>();
		player = new Rocket(WIDTH / 2, HEIGHT - PLAYER_SIZE, PLAYER_SIZE, PLAYER_IMG);
		score = 0;
		IntStream.range(0, MAX_BOMBS).mapToObj(i -> this.newBomb()).forEach(Bombs::add);
	}
	public void CheckScore(){
		System.out.println(highScore);
		if(score >Integer.parseInt((highScore.split(":")[1])))
		{
			String name=JOptionPane.showInputDialog("you set your high score here");
		highScore=name+":"+score;
		File scoreFile=new File("highscore.dat");
		if(!scoreFile.exists());
		{
			try{
				scoreFile.createNewFile();
			}catch (IOException e){
				e.printStackTrace();
			}
		}
		FileWriter writeFile=null;
		BufferedWriter writer=null;
		try
		{
			writeFile =new FileWriter(scoreFile);
		    writer=new BufferedWriter(writeFile);
		    writer.write(this.highScore);
		}
		catch (Exception e)
		{
			
		}
		finally{
			try{
				
			
			if(writer !=null)
				writer.close();
		}
			catch(Exception e){
			}
		}
		}
	}

	
	//run Graphics
	private void run(GraphicsContext gc) {
		gc.setFill(Color.grayRgb(20));
		gc.fillRect(0, 0, WIDTH, HEIGHT);
		gc.setTextAlign(TextAlignment.CENTER);
		gc.setFont(Font.font(20));
		gc.setFill(Color.WHITE);
		gc.fillText("Score: " + score, 750,  580);
		gc.setFill(Color.AQUA);
	gc.fillText("High score:" +highScore,0,BOX_HEIGHT * GRID_HEIGHT+20);
	if(highScore.equals(""))
	{
		highScore=this.GetHighScoreValue();
	}
		
		if(gameOver) {
			gc.setFont(Font.font(35));
			gc.setFill(Color.YELLOW);
			gc.fillText("Game Over \n Your Score is: " + score + " \n Click to play again", WIDTH / 2, HEIGHT /2.5);
		//	return;
		}
		univ.forEach(Universe::draw);
	
		player.update();
		player.draw();
		player.posX = (int) mouseX;
		
		Bombs.stream().peek(Rocket::update).peek(Rocket::draw).forEach(e -> {
			if(player.colide(e) && !player.exploding) {
				player.explode();
			}
		});
		
		
		for (int i = shots.size() - 1; i >=0 ; i--) {
			Shot shot = shots.get(i);
			if(shot.posY < 0 || shot.toRemove)  { 
				shots.remove(i);
				continue;
			}
			shot.update();
			shot.draw();
			for (Bomb bomb : Bombs) {
				if(shot.colide(bomb) && !bomb.exploding) {
					score++;
					bomb.explode();
					shot.toRemove = true;
				}
			}
		}
		
		for (int i = Bombs.size() - 1; i >= 0; i--){  
			if(Bombs.get(i).destroyed)  {
				Bombs.set(i, newBomb());
			}
		}
	
		gameOver = player.destroyed;
		if(RAND.nextInt(10) > 2) {
			univ.add(new Universe());
		}
		for (int i = 0; i < univ.size(); i++) {
			if(univ.get(i).posY > HEIGHT)
				univ.remove(i);
		}
	}

	//player
	public class Rocket {

		int posX, posY, size;
		boolean exploding, destroyed;
		Image img;
		int explosionStep = 0;
		
		public Rocket(int posX, int posY, int size,  Image image) {
			this.posX = posX;
			this.posY = posY;
			this.size = size;
			img = image;
		}
		
		public Shot shoot() {
			return new Shot(posX + size / 2 - Shot.size / 2, posY - Shot.size);
		}

		public void update() {
			if(exploding) explosionStep++;
			destroyed = explosionStep > EXPLOSION_STEPS;
		}
		
		public void draw() {
			if(exploding) {
				gc.drawImage(EXPLOSION_IMG, explosionStep % EXPLOSION_COL * EXPLOSION_W, (explosionStep / EXPLOSION_ROWS) * EXPLOSION_H + 1,
						EXPLOSION_W, EXPLOSION_H,
						posX, posY, size, size);
			}
			else {
				gc.drawImage(img, posX, posY, size, size);
			}
		}
	
		public boolean colide(Rocket other) {
			int d = distance(this.posX + size / 2, this.posY + size /2, 
							other.posX + other.size / 2, other.posY + other.size / 2);
			return d < other.size / 2 + this.size / 2 ;
		}
		
		public void explode() {
			exploding = true;
			explosionStep = -1;
		}

	}
	
	//computer player
	public class Bomb extends Rocket {
		
		int SPEED = (score/5)+2;
		
		public Bomb(int posX, int posY, int size, Image image) {
			super(posX, posY, size, image);
		}
		
		public void update() {
			super.update();
			if(!exploding && !destroyed) posY += SPEED;
			if(posY > HEIGHT) destroyed = true;
		}
	}

	//bullets
	public class Shot {
		
		public boolean toRemove;

		int posX, posY, speed = 10;
		static final int size = 6;
			
		public Shot(int posX, int posY) {
			this.posX = posX;
			this.posY = posY;
		}

		public void update() {
			posY-=speed;
		}
		

		public void draw() {
			CheckScore();
			gc.setFill(Color.RED);
			if (score >=50 && score<=10 || score>=20) {
				gc.setFill(Color.YELLOWGREEN);
				speed = 50;
				gc.fillRect(posX-5, posY-10, size+10, size+30);
			} else {
			gc.fillOval(posX, posY, size, size);
			}
		}
		
		public boolean colide(Rocket Rocket) {
			int distance = distance(this.posX + size / 2, this.posY + size / 2, 
					Rocket.posX + Rocket.size / 2, Rocket.posY + Rocket.size / 2);
			return distance  < Rocket.size / 2 + size / 2;
		} 
		
		
	}
	
	//environment
	public class Universe {
		int posX, posY;
		private int h, w, r, g, b;
		private double opacity;
		
		public Universe() {
			posX = RAND.nextInt(WIDTH);
			posY = 0;
			w = RAND.nextInt(5) + 1;
			h =  RAND.nextInt(5) + 1;
			r = RAND.nextInt(100) + 150;
			g = RAND.nextInt(100) + 150;
			b = RAND.nextInt(100) + 150;
			opacity = RAND.nextFloat();
			if(opacity < 0) opacity *=-1;
			if(opacity > 0.5) opacity = 0.5;
		}
		
		public void draw() {
			if(opacity > 0.8) opacity-=0.01;
			if(opacity < 0.1) opacity+=0.01;
			gc.setFill(Color.rgb(r, g, b, opacity));
			gc.fillOval(posX, posY, w, h);
			posY+=20;
		}
	}
	public String GetHighScoreValue()
	{
		FileReader readFile=null;
		BufferedReader reader=null;
		try {
			readFile =new FileReader("highscore.dat");
	 reader=new BufferedReader(readFile);
	return reader.readLine();
		} 
		catch (Exception e)
		{
	
		return "Nobody:0";
	     }
		finally
		{
			
			try {
				if(reader !=null)
				reader.close();
			} catch (IOException e) {
			
				e.printStackTrace();
			}
			
		}
		
	}
	
	
	Bomb newBomb() {
		return new Bomb(50 + RAND.nextInt(WIDTH - 100), 0, PLAYER_SIZE, BOMBS_IMG[RAND.nextInt(BOMBS_IMG.length)]);
	}
	
	int distance(int x1, int y1, int x2, int y2) {
		return (int) Math.sqrt(Math.pow((x1 - x2), 2) + Math.pow((y1 - y2), 2));
	}
	
	
	public static void main(String[] args) {
		launch();
	}
}
